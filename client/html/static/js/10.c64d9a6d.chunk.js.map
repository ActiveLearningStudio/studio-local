{"version":3,"sources":["assets/images/276.gif","containers/H5PPreview.js"],"names":["counter","H5PPreview","props","useState","loading","setLoading","resourceId","setResourceId","activityId","loadH5pResourceProp","showLtiPreview","showActivityPreview","dispatch","useDispatch","resourceLoaded","data","a","window","H5PIntegration","h5p","settings","document","getElementById","innerHTML","embed_code","trim","newCss","core","styles","concat","loadedCss","Promise","all","map","value","link","createElement","href","type","rel","head","appendChild","scripts","loadedJs","forEach","script","src","async","body","useEffect","h5pIFrame","getElementsByClassName","length","remove","undefined","loadResource","loadH5pResourceSettingsOpen","response","h5p_activity","loadH5pResourceSettingsShared","activity","checkXapi","setInterval","x","contentWindow","H5P","externalDispatcher","xAPIHelper","match","path","stopXapi","on","event","loadH5pResourceXapi","JSON","stringify","statement","e","console","log","clearInterval","id","className","gifLoader","alt","style","color","defaultProps","PropTypes","shape","string","withRouter","connect","state","resource","parentPlaylist","playlist","selectedPlaylist","loadH5pResource"],"mappings":"2LAAe,MAA0B,gC,wBCcrCA,EAAU,EAERC,EAAa,SAACC,GAClB,MAA8BC,oBAAS,GAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KAEA,EAAoCF,mBAAS,MAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KAGEC,EAIEN,EAJFM,WACAC,EAGEP,EAHFO,oBACAC,EAEER,EAFFQ,eACAC,EACET,EADFS,oBAGIC,EAAWC,cAEXC,EAAc,uCAAG,WAAOC,GAAP,eAAAC,EAAA,6DACrBC,OAAOC,eAAiBH,EAAKI,IAAIC,SACdC,SAASC,eAAe,uBAChCC,UAAYR,EAAKI,IAAIK,WAAWC,OACrCC,EAASX,EAAKI,IAAIC,SAASO,KAAKC,OAAOC,OAC3Cd,EAAKI,IAAIC,SAASU,WALC,SAQfC,QAAQC,IACZN,EAAOO,KAAI,SAACC,GACV,IAAMC,EAAOd,SAASe,cAAc,QAKpC,OAJAD,EAAKE,KAAOH,EACZC,EAAKG,KAAO,WACZH,EAAKI,IAAM,aACXlB,SAASmB,KAAKC,YAAYN,IACnB,MAfU,OAmBFpB,EAAKI,IAAIC,SAASO,KAAKe,QAAQb,OAChDd,EAAKI,IAAIC,SAASuB,UAGTC,SAAQ,SAACV,GAClB,IAAMW,EAASxB,SAASe,cAAc,UACtCS,EAAOC,IAAMZ,EACbW,EAAOE,OAAQ,EACf1B,SAAS2B,KAAKP,YAAYI,MAG5BxC,GAAW,GA9BU,2CAAH,sDAgGpB,OA/DA4C,qBAAU,WACR,GAAI3C,IAAeE,EAAY,CAC7B,IAAM0C,EAAY7B,SAAS8B,uBAAuB,cAKlD,GAJID,EAAUE,QACZF,EAAU,GAAGG,SAGI,OAAf7C,QAAsC8C,IAAf9C,EACzB,OAGF,IAAM+C,EAAY,uCAAG,oCAAAvC,EAAA,mEAEbN,EAFa,iCAGQ8C,YAA4BhD,GAHpC,YAGTiD,EAHS,QAIFC,aAJE,gCAKP5C,EAAe2C,EAASC,cALjB,mCAON/C,EAPM,kCAQQgD,YAA8BnD,GARtC,aAQTiD,EARS,QASFG,SATE,kCAUP9C,EAAe2C,EAASG,UAVjB,iDAaQnD,EAAoBD,GAb5B,aAaTiD,EAbS,QAcFG,SAdE,kCAeP9C,EAAe2C,EAASG,UAfjB,0DAmBjBvD,GAAW,GAnBM,QAsBbwD,EAAYC,aAAY,WAC5B,IACE,IAAMC,EAAI1C,SAAS8B,uBAAuB,cAAc,GAAGa,cACvDD,EAAEE,KACAF,EAAEE,IAAIC,oBAAsBC,IAAwBjE,EAAMkE,MAAMC,QAElEC,IAEAP,EAAEE,IAAIC,mBAAmBK,GAAG,QAAQ,SAACC,GAC/BxE,EAAU,GACZY,EAAS6D,YAAoBC,KAAKC,UAAUR,IAA2BK,EAAMzD,KAAK6D,UAAtC,eAAsD1E,OAEpGF,GAAW,MAIjB,MAAO6E,GACPC,QAAQC,IAAIF,OAIVP,EAAW,kBAAMU,cAAcnB,IA3ClB,0DAAH,qDA8ClBN,IAEAhD,EAAcC,MAEf,CAACF,EAAYE,EAAYE,EAAgBC,EAAqBF,IAG/D,mCACIL,EAOA,qBAAK6E,GAAG,sBAAR,SACE,qBAAKC,UAAU,aAAf,SACE,qBAAKpC,IAAKqC,EAAWC,IAAI,SAR7B,qBAAKH,GAAG,sBAAR,SACE,qBAAKC,UAAU,aAAaG,MAAO,CAAEC,MAAO,SAA5C,0CAuBVrF,EAAWsF,aAAe,CACxB7E,gBAAgB,EAChBC,qBAAqB,EACrByD,MAAOoB,IAAUC,MAAM,CAAEpB,KAAMmB,IAAUE,UAY5BC,sBAAWC,aALF,SAACC,GAAD,MAAY,CAClCC,SAAUD,EAAMC,SAChBC,eAAgBF,EAAMG,SAASC,qBANN,SAACrF,GAAD,MAAe,CACxCH,oBAAqB,SAACD,GAAD,OAAgBI,EAASsF,YAAgB1F,QAQtCoF,CAA6C3F","file":"static/js/10.c64d9a6d.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/276.f6c236f2.gif\";","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect, useDispatch } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\n\nimport gifLoader from 'assets/images/276.gif';\nimport {\n  loadH5pResource,\n  loadH5pResourceSettingsOpen,\n  loadH5pResourceSettingsShared,\n  loadH5pResourceXapi,\n} from 'store/actions/resource';\nimport * as xAPIHelper from 'helpers/xapi';\n\nlet counter = 0;\n\nconst H5PPreview = (props) => {\n  const [loading, setLoading] = useState(true);\n\n  const [resourceId, setResourceId] = useState(null);\n\n  const {\n    activityId,\n    loadH5pResourceProp,\n    showLtiPreview,\n    showActivityPreview,\n  } = props;\n\n  const dispatch = useDispatch();\n\n  const resourceLoaded = async (data) => {\n    window.H5PIntegration = data.h5p.settings;\n    const h5pWrapper = document.getElementById('curriki-h5p-wrapper');\n    h5pWrapper.innerHTML = data.h5p.embed_code.trim();\n    const newCss = data.h5p.settings.core.styles.concat(\n      data.h5p.settings.loadedCss,\n    );\n\n    await Promise.all(\n      newCss.map((value) => {\n        const link = document.createElement('link');\n        link.href = value;\n        link.type = 'text/css';\n        link.rel = 'stylesheet';\n        document.head.appendChild(link);\n        return true;\n      }),\n    );\n\n    const newScripts = data.h5p.settings.core.scripts.concat(\n      data.h5p.settings.loadedJs,\n    );\n\n    newScripts.forEach((value) => {\n      const script = document.createElement('script');\n      script.src = value;\n      script.async = false;\n      document.body.appendChild(script);\n    });\n\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    if (resourceId !== activityId) {\n      const h5pIFrame = document.getElementsByClassName('h5p-iframe');\n      if (h5pIFrame.length) {\n        h5pIFrame[0].remove();\n      }\n\n      if (activityId === null || activityId === undefined) {\n        return;\n      }\n\n      const loadResource = async () => {\n        try {\n          if (showLtiPreview) {\n            const response = await loadH5pResourceSettingsOpen(activityId);\n            if (response.h5p_activity) {\n              await resourceLoaded(response.h5p_activity);\n            }\n          } else if (showActivityPreview) {\n            const response = await loadH5pResourceSettingsShared(activityId);\n            if (response.activity) {\n              await resourceLoaded(response.activity);\n            }\n          } else {\n            const response = await loadH5pResourceProp(activityId);\n            if (response.activity) {\n              await resourceLoaded(response.activity);\n            }\n          }\n        } catch (e) {\n          setLoading(false);\n        }\n\n        const checkXapi = setInterval(() => {\n          try {\n            const x = document.getElementsByClassName('h5p-iframe')[0].contentWindow;\n            if (x.H5P) {\n              if (x.H5P.externalDispatcher && xAPIHelper.isxAPINeeded(props.match.path)) {\n                // eslint-disable-next-line no-use-before-define\n                stopXapi();\n\n                x.H5P.externalDispatcher.on('xAPI', (event) => {\n                  if (counter > 0) {\n                    dispatch(loadH5pResourceXapi(JSON.stringify(xAPIHelper.extendStatement(event.data.statement, { ...props }))));\n                  }\n                  counter += 1;\n                });\n              }\n            }\n          } catch (e) {\n            console.log(e);\n          }\n        });\n\n        const stopXapi = () => clearInterval(checkXapi);\n      };\n\n      loadResource();\n\n      setResourceId(activityId);\n    }\n  }, [resourceId, activityId, showLtiPreview, showActivityPreview, loadH5pResourceProp]);\n\n  return (\n    <>\n      {!loading ? (\n        <div id=\"curriki-h5p-wrapper\">\n          <div className=\"loader_gif\" style={{ color: 'black' }}>\n            Unable to Load Activity\n          </div>\n        </div>\n      ) : (\n        <div id=\"curriki-h5p-wrapper\">\n          <div className=\"loader_gif\">\n            <img src={gifLoader} alt=\"\" />\n          </div>\n        </div>\n      )}\n    </>\n  );\n};\n\nH5PPreview.propTypes = {\n  match: PropTypes.shape({ path: PropTypes.string }),\n  activityId: PropTypes.number.isRequired,\n  showLtiPreview: PropTypes.bool,\n  showActivityPreview: PropTypes.bool,\n  loadH5pResourceProp: PropTypes.func.isRequired,\n};\n\nH5PPreview.defaultProps = {\n  showLtiPreview: false,\n  showActivityPreview: false,\n  match: PropTypes.shape({ path: PropTypes.string }),\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  loadH5pResourceProp: (activityId) => dispatch(loadH5pResource(activityId)),\n});\n\nconst mapStateToProps = (state) => ({\n  resource: state.resource,\n  parentPlaylist: state.playlist.selectedPlaylist,\n});\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(H5PPreview));\n"],"sourceRoot":""}