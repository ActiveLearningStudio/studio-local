{"version":3,"sources":["containers/Preview/ProjectPreview/ProjectPreviewShared.js","containers/PreviewPageShared.js"],"names":["ProjectPreviewShared","props","match","sampleId","loadMyProjectsPreviewShared","setModalShow","setCurrentActivity","project","useSelector","state","accordion","useRef","useState","currentProject","setCurrentProject","useEffect","Object","keys","projectSelect","length","playlists","settings","dots","arrows","infinite","speed","slidesToShow","slidesToScroll","responsive","breakpoint","initialSlide","params","projectId","localStorage","setItem","map","playlist","counter","activities","activity","parseInt","playlistId","id","sampleID","lti","className","role","type","ref","el","current","onClick","classList","toggle","icon","title","status","text","thumb_url","includes","src","alt","global","config","resourceUrl","name","description","isSharedProject","variant","style","margin","fontSize","defaultProps","withRouter","connect","dispatch","loadMyProjectsPreviewSharedAction","loadMyProjects","loadMyProjectsAction","logProjectView","logProjectViewAction","useBodyClass","content","key","showLti"],"mappings":"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","file":"static/js/51.4755e1ad.chunk.js","sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport { connect, useSelector } from 'react-redux';\nimport Slider from 'react-slick';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { Alert } from 'react-bootstrap';\n\nimport { loadMyProjectsPreviewSharedAction } from 'store/actions/project';\nimport ActivityCard from 'components/ActivityCard';\nimport Unauthorized from 'components/Unauthorized';\n\nimport './style.scss';\n\nfunction ProjectPreviewShared(props) {\n  const {\n    match,\n    sampleId,\n    loadMyProjectsPreviewShared,\n    setModalShow,\n    setCurrentActivity,\n  } = props;\n\n  const project = useSelector((state) => state.project);\n  const accordion = useRef([]);\n\n  const [currentProject, setCurrentProject] = useState(null);\n\n  useEffect(() => {\n    if (project && Object.keys(project.projectSelect).length > 0) {\n      setCurrentProject(project.projectSelect);\n    }\n  }, [project]);\n\n  const settings = {\n    dots: false,\n    arrows: true,\n    infinite: false,\n    speed: 500,\n    slidesToShow: 5.5,\n    slidesToScroll: 1,\n    responsive: [\n      {\n        breakpoint: 1024,\n        settings: {\n          slidesToShow: 3,\n          slidesToScroll: 3,\n          infinite: true,\n          dots: false,\n        },\n      },\n      {\n        breakpoint: 600,\n        settings: {\n          slidesToShow: 2,\n          slidesToScroll: 2,\n          initialSlide: 2,\n        },\n      },\n      {\n        breakpoint: 480,\n        settings: {\n          slidesToShow: 1.5,\n          slidesToScroll: 1,\n        },\n      },\n    ],\n  };\n\n  // useEffect(() => {\n  //   try {\n  //     const acc = document.getElementById('custom_accordion');\n  //     const accordions = acc ? acc.getElementsByClassName('accordion') : [];\n  //\n  //     for (let i = 0; i < accordions.length; i += 1) {\n  //       accordions[i].addEventListener('click', function () {\n  //         // eslint-disable-next-line react/no-this-in-sfc\n  //         this.classList.toggle('active');\n  //       });\n  //     }\n  //   } catch (e) {\n  //     throw e\n  //   }\n  // }, []);\n\n  useEffect(() => {\n    if (sampleId) {\n      loadMyProjectsPreviewShared(sampleId);\n    } else {\n      loadMyProjectsPreviewShared(match.params.projectId);\n    }\n  }, [match.params.projectId, sampleId]);\n  useEffect(() => {\n      localStorage.setItem('lti_activity', true);\n  }, []);\n\n  let playlists;\n\n  if (currentProject) {\n    playlists = currentProject.playlists && currentProject.playlists.map((playlist, counter) => {\n      let activities;\n      if (playlist.activities.length > 0) {\n        activities = playlist.activities.map((activity) => (\n          <ActivityCard\n            activity={activity}\n            projectId={parseInt(match.params.projectId, 10)}\n            playlistId={playlist.id}\n            key={activity.id}\n            sampleID={sampleId}\n            setModalShow={setModalShow}\n            setCurrentActivity={setCurrentActivity}\n            lti\n          />\n        ));\n      } else {\n        activities = (\n          <div className=\"col-md-12\">\n            <div className=\"alert alert-info\" role=\"alert\">\n              No activity defined for this playlist.\n            </div>\n          </div>\n        );\n      }\n\n      return (\n        <div className=\"check-each\" key={playlist.id}>\n          <button\n            type=\"button\"\n            ref={(el) => {\n              accordion.current[counter] = el;\n            }}\n            className={counter === 0 ? 'active accordion' : ' accordion'}\n            onClick={() => {\n              accordion.current[counter].classList.toggle('active');\n            }}\n          >\n            <FontAwesomeIcon icon=\"plus\" />\n            {playlist.title}\n          </button>\n\n          <div className=\"panel \">\n            <ul>\n              <Slider {...settings}>{activities}</Slider>\n            </ul>\n          </div>\n        </div>\n      );\n    });\n  } else {\n    playlists = (\n      <div className=\"col-md-12\">\n        <div className=\"alert alert-info\" role=\"alert\">\n          No playlists defined for this project.\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"full-width-share\">\n      {currentProject && currentProject.status === 'error' ? (\n        <Unauthorized text=\"Project is not Public\" />\n      ) : (\n        <>\n          {currentProject ? (\n            <div>\n              <div className=\"container\">\n                <div className=\"scene flex-wrap\">\n                  <div className=\"scene-img\">\n                    {!!currentProject.thumb_url && currentProject.thumb_url.includes('pexels.com') ? (\n                      <img src={currentProject.thumb_url} alt=\"thumbnail\" />\n                    ) : (\n                      <img src={global.config.resourceUrl + currentProject.thumb_url} alt=\"thumbnail\" />\n                    )}\n                  </div>\n                  <div className=\"sce_cont\">\n                    {/* <div className=\"collapse-toggle\"><img src=\"/images/plusblk.png\" alt=\"plusblk\" /></div> */}\n                    <ul className=\"bar_list flex-div\">\n                      <li>\n                        <div className=\"title_lg check\">\n                          <div>\n                            {currentProject.name}\n                          </div>\n                        </div>\n                      </li>\n                    </ul>\n\n                    <p className=\"expandiv\">{currentProject.description}</p>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"container\">\n                <div className=\"playlist-div\">\n                  <div className=\"playlist-title-div\">\n                    <div className=\"title-md\">Playlists</div>\n                  </div>\n                  <div className=\"all-playlist check-custom\">\n                    <div className=\"playlist-accordion\" id=\"custom_accordion\">\n                      {playlists}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          ) : (\n            project.isSharedProject === false ? (\n              <Alert variant=\"danger\" style={{ margin: '40px', fontSize: '1.5em' }}>Project is not sharable.</Alert>\n            ) : (\n              <Alert variant=\"primary\" style={{ margin: '20px' }}>Loading ...</Alert>\n            )\n          )}\n        </>\n      )}\n    </div>\n  );\n}\n\nProjectPreviewShared.propTypes = {\n  match: PropTypes.object.isRequired,\n  sampleId: PropTypes.number,\n  setCurrentActivity: PropTypes.func.isRequired,\n  setModalShow: PropTypes.func.isRequired,\n  loadMyProjectsPreviewShared: PropTypes.func.isRequired,\n};\n\nProjectPreviewShared.defaultProps = {\n  sampleId: null,\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  loadMyProjectsPreviewShared: (projectId) => dispatch(loadMyProjectsPreviewSharedAction(projectId)),\n});\n\nexport default withRouter(\n  connect(null, mapDispatchToProps)(ProjectPreviewShared),\n);\n","import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\n\nimport useBodyClass from 'helpers/BodyClass';\nimport { loadMyProjectsAction } from 'store/actions/project';\nimport ProjectPreview from 'containers/Preview/ProjectPreview/ProjectPreviewShared';\nimport { logProjectViewAction } from 'store/actions/metrics';\n\nfunction PreviewPage(props) {\n  const { match, project, logProjectView } = props;\n\n  useBodyClass('hidechat-container');\n\n  const content = (\n    <ProjectPreview\n      {...props}\n      key={match.params.projectId}\n      project={project}\n      showLti={false}\n    />\n  );\n\n  useEffect(() => {\n    logProjectView(match.params.projectId);\n  }, [logProjectView, match.params.projectId]);\n\n  return (\n    <div>{content}</div>\n  );\n}\n\nPreviewPage.propTypes = {\n  match: PropTypes.object.isRequired,\n  project: PropTypes.object.isRequired,\n  logProjectView: PropTypes.func.isRequired,\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  loadMyProjects: () => dispatch(loadMyProjectsAction()),\n  logProjectView: (projectId) => dispatch(logProjectViewAction(projectId)),\n});\n\nconst mapStateToProps = (state) => ({\n  project: state.project,\n});\n\nexport default withRouter(\n  connect(mapStateToProps, mapDispatchToProps)(PreviewPage),\n);\n"],"sourceRoot":""}