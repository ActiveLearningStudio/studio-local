{"version":3,"sources":["services/gapi.service.js","store/actions/gapi.js","assets/images/loginlogo.png","components/models/GoogleLoginModal.js","store/actions/share.js","containers/Preview/ProjectPreview/SecureProjectPreviewShared.js","containers/SecureProjectPreview.js"],"names":["apiVersion","config","gapiBaseUrl","token","axios","method","url","headers","Authorization","then","response","params","courseStates","activityId","studentId","submissionId","httpService","get","gcuid","submissionid","data","catch","err","Promise","reject","Swal","fire","title","icon","html","message","classworkId","courseId","post","course_id","access_token","gc_classwork_id","gc_submission_id","actor","activity","error","errors","console","log","googleShare","value","type","GOOGLE_SHARE","getProjectId","googleClassRoomLoginAction","dispatch","a","searchService","googleShareToken","JSON","stringify","tokenObj","getCourses","ALL_COURSES","payload","courses","googleClassRoomLoginFailure","id","GOOGLE_CLASSROOM_LOGIN_FAILURE","googleClassRoomLoginFailureAction","GOOGLE_CLASSROOM_LOGIN","confirmButtonColor","text","replace","e","setStudentAuthAction","gapiService","accessToken","studentProfile","SET_STUDENT_AUTH","studentData","auth","profile","refreshStudentAuthTokenAction","newToken","SET_STUDENT_AUTH_TOKEN","getStudentCoursesAction","coursesResponse","GET_STUDENT_COURSES","loadH5pResourceSettings","h5pSettings","GET_H5P_SETTINGS","getSubmissionAction","submission","GET_SUBMISSION","turnInAction","turnedIn","TURNED_IN_ACTIVITY","getSummaryAuthAction","summaryAuth","GET_SUMMARY_AUTH","getOutcomeSummaryAction","outcomeSummary","GET_OUTCOME_SUMMARY","withRouter","connect","googleClassRoomLogin","show","onHide","projectId","dataRedux","useSelector","state","useState","tokenTemp","setTokenTemp","showForm","setShowForm","setCourses","loading","setLoading","useEffect","share","open","onClose","center","className","src","logo","alt","style","maxWidth","initialValues","course","undefined","heading","description","room","onSubmit","values","copyProject","handleChange","handleBlur","handleSubmit","name","onChange","onBlur","map","item","clientId","global","gapiClientId","onSuccess","scope","cookiePolicy","showCancelButton","showConfirmButton","allowOutsideClick","googleClassShare","ProjectPreviewShared","props","match","sampleId","loadMyProjectsPreviewShared","setModalShow","setCurrentActivity","project","accordion","useRef","currentProject","setCurrentProject","setShow","Object","keys","projectSelect","length","playlists","settings","dots","arrows","infinite","speed","slidesToShow","slidesToScroll","responsive","breakpoint","initialSlide","playlist","counter","activities","parseInt","playlistId","sampleID","lti","role","ref","el","current","onClick","classList","toggle","status","thumb_url","includes","resourceUrl","isSharedProject","variant","margin","fontSize","defaultProps","loadMyProjectsPreviewSharedAction","loadMyProjects","loadMyProjectsAction","logProjectView","logProjectViewAction","useBodyClass","content","key","showLti"],"mappings":"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","file":"static/js/41.39939167.chunk.js","sourcesContent":["import axios from 'axios';\nimport config from 'config';\nimport Swal from 'sweetalert2';\nimport httpService from './http.service';\n\nconst { apiVersion } = config;\nconst gapiBaseUrl = 'https://classroom.googleapis.com/v1';\n\nconst getStudentProfile = (token) => axios({\n  method: 'get',\n  url: `${gapiBaseUrl}/userProfiles/me`,\n  headers: {\n    Authorization: `Bearer ${token}`,\n  },\n})\n  .then((response) => response);\n\nconst getStudentCourses = (token) => axios({\n  method: 'get',\n  url: `${gapiBaseUrl}/courses`,\n  params: {\n    courseStates: 'ACTIVE',\n  },\n  headers: {\n    Authorization: `Bearer ${token}`,\n  },\n})\n  .then((response) => response);\n\nconst getCourse = (token, courseId) => axios({\n  method: 'get',\n  url: `${gapiBaseUrl}/courses/${courseId}`,\n  headers: {\n    Authorization: `Bearer ${token}`,\n  },\n})\n  .then((response) => response);\n\nconst getSubmission = (classworkId, courseId, token) => httpService\n  .post(\n    `/${apiVersion}/google-classroom/classwork/${classworkId}/submission`,\n    { course_id: courseId, access_token: token },\n  )\n  .then(({ data }) => data)\n  .catch((err) => Promise.reject(err.response.data));\n\nconst turnIn = (classworkId, courseId, token) => httpService\n  .post(\n    `/${apiVersion}/google-classroom/turnin/${classworkId}`,\n    { course_id: courseId, access_token: token },\n  )\n  .then(({ data }) => data)\n  .catch((err) => Promise.reject(err.response.data));\n\nconst getSummaryAuth = (token, courseId, classworkId, submissionId) => httpService\n  .post(\n    `/${apiVersion}/google-classroom/validate-summary-access`,\n    {\n      course_id: courseId,\n      access_token: token,\n      gc_classwork_id: classworkId,\n      gc_submission_id: submissionId,\n    },\n  )\n  .then(({ data }) => data)\n  .catch((response) => response.response.data);\n\nconst getOutcomeSummary = (studentId, activityId) => httpService\n  .post(\n    `/${apiVersion}/outcome/summary`,\n    {\n      actor: studentId,\n      activity: activityId,\n    },\n  )\n  .then(({ data }) => data)\n  .catch((error) => {\n    if (error && error.response && error.response.data && error.response.data.errors) {\n      return error.response.data;\n    }\n\n    console.log('Unexpected error in summary endpoint:');\n    console.log(error);\n    return null;\n  });\n\nconst h5pResourceSettings = (activityId, studentId = null, submissionId = null) => httpService\n  .get(\n    `/${apiVersion}/google-classroom/activities/${activityId}/h5p-resource-settings`,\n    {},\n    {\n      gcuid: studentId,\n      submissionid: submissionId,\n    },\n  )\n  .then(({ data }) => data)\n  .catch((err) => {\n    Promise.reject(err.response.data);\n    Swal.fire({\n      title: 'Error',\n      icon: 'error',\n      html: err.message || 'Something went wrong! We are unable to load activity.',\n    });\n  });\n\nexport default {\n  getStudentProfile,\n  getStudentCourses,\n  getCourse,\n  h5pResourceSettings,\n  getSubmission,\n  turnIn,\n  getSummaryAuth,\n  getOutcomeSummary,\n};\n","import Swal from 'sweetalert2';\nimport searchService from 'services/search.service';\nimport gapiService from 'services/gapi.service';\nimport {\n  GOOGLE_CLASSROOM_LOGIN,\n  GOOGLE_CLASSROOM_LOGIN_FAILURE,\n  GOOGLE_SHARE,\n  LOAD_GOOGLE_CLASSROOM_COURSES,\n  ALL_COURSES,\n  GET_STUDENT_COURSES,\n  SET_STUDENT_AUTH,\n  SET_STUDENT_AUTH_TOKEN,\n  GET_H5P_SETTINGS,\n  GET_SUBMISSION,\n  TURNED_IN_ACTIVITY,\n  GET_SUMMARY_AUTH,\n  GET_OUTCOME_SUMMARY,\n} from '../actionTypes';\n\nexport const googleClassRoomLogin = (id) => ({\n  type: GOOGLE_CLASSROOM_LOGIN,\n  id,\n});\n\nexport const googleShare = (value) => ({\n  type: GOOGLE_SHARE,\n  value,\n});\n\nexport const loadCourses = (value) => ({\n  type: LOAD_GOOGLE_CLASSROOM_COURSES,\n  value,\n});\n\n// let projectId = '';\nexport const getProjectId = (/* id */) => {\n  // projectId = id;\n};\n\nexport const fetchCourses = () => {\n  Swal.fire({\n    title: 'Loading...',\n    showCancelButton: false,\n    showConfirmButton: false,\n    allowOutsideClick: false,\n  });\n};\n\n// shows the delete popup on activities, project, playlists\nexport const googleClassRoomLoginAction = (response) => async (dispatch) => {\n  dispatch(googleShare(true));\n\n  try {\n    // save access token\n    await searchService.googleShareToken(JSON.stringify(response.tokenObj));\n    const getCourses = await searchService.getCourses();\n    dispatch({\n      type: ALL_COURSES,\n      payload: getCourses.courses,\n    });\n\n    // dispatch(googleClassRoomLogin(response));\n  } catch (e) {\n    console.log(e);\n  }\n};\n\nexport const googleClassRoomLoginFailure = (id) => ({\n  type: GOOGLE_CLASSROOM_LOGIN_FAILURE,\n  id,\n});\n\n// shows the delete popup on activities, project, playlists\nexport const googleClassRoomLoginFailureAction = (response) => async (dispatch) => {\n  dispatch(googleShare('close'));\n  dispatch(googleClassRoomLogin(response));\n\n  try {\n    Swal.fire({\n      confirmButtonColor: '#5952c6',\n      icon: 'error',\n      text: response.error.replace(/_/g, ' '),\n    });\n\n    // dispatch(googleShare(true));\n    dispatch(googleClassRoomLoginFailure(response));\n  } catch (e) {\n    console.log(e);\n  }\n};\n\n// Set student auth data\nexport const setStudentAuthAction = (data) => async (dispatch) => {\n  // Auth data doesn't provide the google user ID so we get profile data\n  const studentProfile = await gapiService.getStudentProfile(data.accessToken);\n\n  dispatch({\n    type: SET_STUDENT_AUTH,\n    studentData: {\n      auth: data,\n      profile: studentProfile,\n    },\n  });\n};\n\nexport const refreshStudentAuthTokenAction = (newToken) => async (dispatch) => {\n  dispatch({\n    type: SET_STUDENT_AUTH_TOKEN,\n    newToken: { ...newToken },\n  });\n};\n\n// Gets courses for student\nexport const getStudentCoursesAction = (token) => async (dispatch) => {\n  const coursesResponse = await gapiService.getStudentCourses(token);\n  dispatch({\n    type: GET_STUDENT_COURSES,\n    coursesResponse,\n  });\n};\n\nexport const loadH5pResourceSettings = (activityId, studentId = null, submissionId = null) => async (dispatch) => {\n  const h5pSettings = await gapiService.h5pResourceSettings(activityId, studentId, submissionId);\n  dispatch({\n    type: GET_H5P_SETTINGS,\n    h5pSettings,\n  });\n};\n\nexport const getSubmissionAction = (classworkId, courseId, auth) => async (dispatch) => {\n  const submission = await gapiService.getSubmission(classworkId, courseId, JSON.stringify(auth.tokenObj))\n    .catch((err) => err);\n\n  dispatch({\n    type: GET_SUBMISSION,\n    submission,\n  });\n};\n\nexport const turnInAction = (classworkId, courseId, auth) => async (dispatch) => {\n  const turnedIn = await gapiService.turnIn(classworkId, courseId, JSON.stringify(auth.tokenObj));\n  dispatch({\n    type: TURNED_IN_ACTIVITY,\n    turnedIn,\n  });\n};\n\nexport const getSummaryAuthAction = (auth, courseId, classworkId, submissionId) => async (dispatch) => {\n  const summaryAuth = await gapiService.getSummaryAuth(JSON.stringify(auth.tokenObj), courseId, classworkId, submissionId);\n\n  dispatch({\n    type: GET_SUMMARY_AUTH,\n    summaryAuth,\n  });\n};\n\nexport const getOutcomeSummaryAction = (studentId, activityId) => async (dispatch) => {\n  const outcomeSummary = await gapiService.getOutcomeSummary(studentId, activityId);\n  dispatch({\n    type: GET_OUTCOME_SUMMARY,\n    outcomeSummary,\n  });\n};\n","export default __webpack_public_path__ + \"static/media/loginlogo.b91b6143.png\";","/* eslint-disable */\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect, useSelector } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport 'react-responsive-modal/styles.css';\nimport { Modal } from 'react-responsive-modal';\n\nimport { Formik } from 'formik';\nimport { GoogleLogin } from 'react-google-login';\n\nimport logo from 'assets/images/loginlogo.png';\nimport {\n  googleClassRoomLoginAction,\n  googleClassRoomLoginFailureAction,\n} from 'store/actions/gapi';\nimport { copyProject } from 'store/actions/share';\n\nconst GoogleLoginModal = ({\n  show,\n  onHide,\n  googleClassRoomLogin,\n  googleClassRoomLoginFailure,\n  projectId,\n}) => {\n  const dataRedux = useSelector((state) => state);\n  const [tokenTemp, setTokenTemp] = useState('');\n  const [showForm, setShowForm] = useState(false);\n  const [courses, setCourses] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    if (dataRedux.share.googleShare === true) {\n      setShowForm(true);\n    } else if (dataRedux.share.googleShare === false) {\n      setShowForm(false);\n    } else if (dataRedux.share.googleShare === 'close') {\n      onHide();\n    }\n  }, [dataRedux, onHide]);\n\n  useEffect(() => {\n    if (dataRedux.share.courses) {\n      setCourses(dataRedux.share.courses);\n      setLoading(false);\n    }\n  }, [dataRedux.share.courses]);\n\n  return (\n    <Modal\n      open={show}\n      onClose={onHide}\n      center\n    >\n      <div className=\"model-box-google model-box-view\">\n        <div className=\"modal-header\">\n          <img src={logo} alt=\"\" />\n        </div>\n        <div className=\"model-body\" style={{ maxWidth: '500px' }}>\n          <div className=\"sign-in-google\">\n            <br />\n            {!showForm ? (\n              <div className=\"content-authorization\">\n                <p>\n                  With CurrikiStudio you can publish your Project as a new Google Classroom course.\n                </p>\n                <p>To start, please log into your Google account.</p>\n                <div>\n                  <GoogleLogin\n                    clientId={global.config.gapiClientId}\n                    onSuccess={(data) => {\n                      googleClassRoomLogin(data);\n                      setTokenTemp(JSON.stringify(data.tokenObj));\n                    }}\n                    // onFailure={googleClassRoomLoginFailure}\n                    scope=\"https://www.googleapis.com/auth/classroom.courses.readonly https://www.googleapis.com/auth/classroom.courses https://www.googleapis.com/auth/classroom.topics https://www.googleapis.com/auth/classroom.coursework.me https://www.googleapis.com/auth/classroom.coursework.students\"\n                    cookiePolicy=\"single_host_origin\"\n                  >\n                    <span>Login with Google</span>\n                  </GoogleLogin>\n                </div>\n              </div>\n            ) : (\n              <div className=\"classroom-form\">\n                <div>\n                  <h1>Are you sure you want to share this Project to Google Classroom?</h1>\n\n                  {loading && (\n                    <p className=\"loading-classes\">Loading Classes....</p>\n                  )}\n\n                  <Formik\n                    initialValues={{\n                      course: undefined,\n                      heading: 'test',\n                      description: 'test',\n                      room: 'test',\n                    }}\n                    onSubmit={(values) => {\n                      onHide();\n                      if (values.course === 'Create a new class') {\n                        copyProject(projectId, null, tokenTemp);\n                      } else {\n                        copyProject(projectId, values.course, tokenTemp);\n                      }\n                      setLoading(false);\n                    }}\n                  >\n                    {({\n                      values,\n                      // errors,\n                      // touched,\n                      handleChange,\n                      handleBlur,\n                      handleSubmit,\n                      // isSubmitting,\n                      /* and other goodies */\n                    }) => (\n                      <form onSubmit={handleSubmit}>\n                        <select\n                          className=\"form-control select-dropdown\"\n                          name=\"course\"\n                          value={values.course}\n                          onChange={handleChange}\n                          onBlur={handleBlur}\n                        >\n                          <option>Create a new class</option>\n                          {!!courses && courses.map((item) => (\n                            <option key={item.id} value={item.id}>{item.name}</option>\n                          ))}\n                        </select>\n                        {/* <input\n                          type=\"text\"\n                          name=\"course\"\n                          class=\"form-control\"\n                          onChange={handleChange}\n                          onBlur={handleBlur}\n                          value={values.course}\n                          placeholder=\"Course Name\"\n                        /> */}\n\n                        {/* {errors.course && touched.course && (\n                          <div className=\"form-error\">{errors.course}</div>\n                        )} */}\n\n                        {/* <select\n                          class=\"form-control\"\n                          name=\"room\"\n                          onChange={handleChange}\n                          onBlur={handleBlur}\n                          value={values.room}\n                          placeholder=\"Course Name\"\n                        >\n                          <option>Select your room</option>\n                          {rooms.map((data) => (\n                            <option key={data.id}>{data}</option>\n                          ))}\n                        </select> */}\n\n                        {/* {errors.room && touched.room && (\n                          <div className=\"form-error\">{errors.room}</div>\n                        )} */}\n\n                        {/* <input\n                          type=\"text\"\n                          name=\"heading\"\n                          class=\"form-control\"\n                          onChange={handleChange}\n                          onBlur={handleBlur}\n                          value={values.heading}\n                          placeholder=\"Heading\"\n                        /> */}\n\n                        {/* {errors.heading && touched.heading && (\n                          <div className=\"form-error\">{errors.heading}</div>\n                        )} */}\n\n                        {/* <textarea\n                          class=\"form-control\"\n                          rows=\"5\"\n                          type=\"text\"\n                          name=\"description\"\n                          onChange={handleChange}\n                          onBlur={handleBlur}\n                          value={values.description}\n                          placeholder=\"Description\"\n                        /> */}\n\n                        {/* {errors.description && touched.description && (\n                          <div className=\"form-error\">{errors.description}</div>\n                        )} */}\n\n                        {/*\n                        <p>\n                          Are you sure you want to share this Project to Google Classroom?\n                        </p>\n                        */}\n                        {!loading && (\n                          <button type=\"submit\">Confirm</button>\n                        )}\n                      </form>\n                    )}\n                  </Formik>\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nGoogleLoginModal.propTypes = {\n  show: PropTypes.bool.isRequired,\n  projectId: PropTypes.number.isRequired,\n  onHide: PropTypes.func.isRequired,\n  googleClassRoomLogin: PropTypes.func.isRequired,\n  googleClassRoomLoginFailure: PropTypes.func.isRequired,\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  googleClassRoomLogin: (data) => dispatch(googleClassRoomLoginAction(data)),\n  googleClassRoomLoginFailure: (data) => dispatch(googleClassRoomLoginFailureAction(data)),\n});\n\nexport default withRouter(\n  connect(null, mapDispatchToProps)(GoogleLoginModal),\n);\n","import Swal from 'sweetalert2';\n\nimport searchService from 'services/search.service';\n\n// eslint-disable-next-line import/prefer-default-export\nexport const copyProject = async (projectId, courseId, token) => {\n  Swal.fire({\n    title: 'Publishing....',\n    showCancelButton: false,\n    showConfirmButton: false,\n    allowOutsideClick: false,\n  });\n  const result = await searchService.googleClassShare(projectId, courseId, token);\n  if (result.course) {\n    Swal.fire({\n      icon: 'success',\n      title: 'Shared!',\n      confirmButtonColor: '#5952c6',\n      html: 'Your project has been shared to Google Classroom',\n      // text: `Your playlist has been submitted to ${lmsUrl}`,\n    });\n  } else {\n    Swal.fire({\n      confirmButtonColor: '#5952c6',\n      icon: 'error',\n      text: 'Something went wrong, Kindly try again.',\n    });\n  }\n};\n","import React, { useEffect, useState, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport { connect, useSelector } from 'react-redux';\nimport Slider from 'react-slick';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { Alert } from 'react-bootstrap';\n\nimport { loadMyProjectsPreviewSharedAction } from 'store/actions/project';\nimport ActivityCard from 'components/ActivityCard';\nimport Unauthorized from 'components/Unauthorized';\nimport GoogleModel from 'components/models/GoogleLoginModal';\n\nimport './style.scss';\n\nfunction ProjectPreviewShared(props) {\n  const {\n    match,\n    sampleId,\n    loadMyProjectsPreviewShared,\n    setModalShow,\n    setCurrentActivity,\n  } = props;\n\n  const project = useSelector((state) => state.project);\n  const accordion = useRef([]);\n\n  const [currentProject, setCurrentProject] = useState(null);\n  const [show, setShow] = useState(false);\n\n  useEffect(() => {\n    if (project && Object.keys(project.projectSelect).length > 0) {\n      setCurrentProject(project.projectSelect);\n    }\n  }, [project]);\n\n  const handleClose = () => {\n    setShow(false);\n  };\n\n  const settings = {\n    dots: false,\n    arrows: true,\n    infinite: false,\n    speed: 500,\n    slidesToShow: 5.5,\n    slidesToScroll: 1,\n    responsive: [\n      {\n        breakpoint: 1024,\n        settings: {\n          slidesToShow: 3,\n          slidesToScroll: 3,\n          infinite: true,\n          dots: false,\n        },\n      },\n      {\n        breakpoint: 600,\n        settings: {\n          slidesToShow: 2,\n          slidesToScroll: 2,\n          initialSlide: 2,\n        },\n      },\n      {\n        breakpoint: 480,\n        settings: {\n          slidesToShow: 1.5,\n          slidesToScroll: 1,\n        },\n      },\n    ],\n  };\n\n  // useEffect(() => {\n  //   try {\n  //     const acc = document.getElementById('custom_accordion');\n  //     const accordions = acc ? acc.getElementsByClassName('accordion') : [];\n  //\n  //     for (let i = 0; i < accordions.length; i += 1) {\n  //       accordions[i].addEventListener('click', function () {\n  //         // eslint-disable-next-line react/no-this-in-sfc\n  //         this.classList.toggle('active');\n  //       });\n  //     }\n  //   } catch (e) {\n  //     throw e\n  //   }\n  // }, []);\n\n  useEffect(() => {\n    if (sampleId) {\n      loadMyProjectsPreviewShared(sampleId);\n    } else {\n      loadMyProjectsPreviewShared(match.params.projectId);\n    }\n  }, [match.params.projectId, sampleId]);\n\n  let playlists;\n\n  if (currentProject) {\n    playlists = currentProject.playlists && currentProject.playlists.map((playlist, counter) => {\n      let activities;\n      if (playlist.activities.length > 0) {\n        activities = playlist.activities.map((activity) => (\n          <ActivityCard\n            activity={activity}\n            projectId={parseInt(match.params.projectId, 10)}\n            playlistId={playlist.id}\n            key={activity.id}\n            sampleID={sampleId}\n            setModalShow={setModalShow}\n            setCurrentActivity={setCurrentActivity}\n            lti\n          />\n        ));\n      } else {\n        activities = (\n          <div className=\"col-md-12\">\n            <div className=\"alert alert-info\" role=\"alert\">\n              No activity defined for this playlist.\n            </div>\n          </div>\n        );\n      }\n\n      return (\n        <div className=\"check-each\" key={playlist.id}>\n          <button\n            type=\"button\"\n            ref={(el) => {\n              accordion.current[counter] = el;\n            }}\n            className={counter === 0 ? 'active accordion' : ' accordion'}\n            onClick={() => {\n              accordion.current[counter].classList.toggle('active');\n            }}\n          >\n            <FontAwesomeIcon icon=\"plus\" />\n            {playlist.title}\n          </button>\n\n          <div className=\"panel \">\n            <ul>\n              <Slider {...settings}>{activities}</Slider>\n            </ul>\n          </div>\n        </div>\n      );\n    });\n  } else {\n    playlists = (\n      <div className=\"col-md-12\">\n        <div className=\"alert alert-info\" role=\"alert\">\n          No playlists defined for this project.\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"full-width-share\">\n      {currentProject && currentProject.status === 'error' ? (\n        <Unauthorized text=\"Project is not Public\" />\n      ) : (\n        <>\n          {currentProject ? (\n            <div>\n              <div className=\"container\">\n                <div className=\"scene flex-wrap\">\n                  <div className=\"scene-img\">\n                    {!!currentProject.thumb_url && currentProject.thumb_url.includes('pexels.com') ? (\n                      <img src={currentProject.thumb_url} alt=\"thumbnail\" />\n                    ) : (\n                      <img src={global.config.resourceUrl + currentProject.thumb_url} alt=\"thumbnail\" />\n                    )}\n                  </div>\n                  <div className=\"sce_cont\">\n                    {/* <div className=\"collapse-toggle\"><img src=\"/images/plusblk.png\" alt=\"plusblk\" /></div> */}\n                    <ul className=\"bar_list flex-div\">\n                      <li>\n                        <div className=\"title_lg check\">\n                          <div>\n                            {currentProject.name}\n                          </div>\n                          <div className=\"googleSign\" onClick={() => setShow(true)}>\n                            <FontAwesomeIcon icon=\"google\" />\n                            Publish Google Class\n                          </div>\n                        </div>\n                      </li>\n                    </ul>\n\n                    <p className=\"expandiv\">{currentProject.description}</p>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"container\">\n                <div className=\"playlist-div\">\n                  <div className=\"playlist-title-div\">\n                    <div className=\"title-md\">Playlists</div>\n                  </div>\n                  <div className=\"all-playlist check-custom\">\n                    <div className=\"playlist-accordion\" id=\"custom_accordion\">\n                      {playlists}\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <GoogleModel\n                projectId={currentProject.id}\n                show={show} // {props.show}\n                onHide={handleClose}\n              />\n            </div>\n          ) : (\n            project.isSharedProject === false ? (\n              <Alert variant=\"danger\" style={{ margin: '40px', fontSize: '1.5em' }}>Project is not sharable.</Alert>\n            ) : (\n              <Alert variant=\"primary\" style={{ margin: '20px' }}>Loading ...</Alert>\n            )\n          )}\n        </>\n      )}\n    </div>\n  );\n}\n\nProjectPreviewShared.propTypes = {\n  match: PropTypes.object.isRequired,\n  sampleId: PropTypes.number,\n  setCurrentActivity: PropTypes.func.isRequired,\n  setModalShow: PropTypes.func.isRequired,\n  loadMyProjectsPreviewShared: PropTypes.func.isRequired,\n};\n\nProjectPreviewShared.defaultProps = {\n  sampleId: null,\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  loadMyProjectsPreviewShared: (projectId) => dispatch(loadMyProjectsPreviewSharedAction(projectId)),\n});\n\nexport default withRouter(\n  connect(null, mapDispatchToProps)(ProjectPreviewShared),\n);\n","import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\n\nimport useBodyClass from 'helpers/BodyClass';\nimport { loadMyProjectsAction } from 'store/actions/project';\nimport ProjectPreview from 'containers/Preview/ProjectPreview/SecureProjectPreviewShared';\nimport { logProjectViewAction } from 'store/actions/metrics';\n\nfunction PreviewPage(props) {\n  const { match, project, logProjectView } = props;\n\n  useBodyClass('hidechat-container');\n\n  const content = (\n    <ProjectPreview\n      {...props}\n      key={match.params.projectId}\n      project={project}\n      showLti={false}\n    />\n  );\n\n  useEffect(() => {\n    logProjectView(match.params.projectId);\n  }, [logProjectView, match.params.projectId]);\n\n  return (\n    <div>{content}</div>\n  );\n}\n\nPreviewPage.propTypes = {\n  match: PropTypes.object.isRequired,\n  project: PropTypes.object.isRequired,\n  logProjectView: PropTypes.func.isRequired,\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  loadMyProjects: () => dispatch(loadMyProjectsAction()),\n  logProjectView: (projectId) => dispatch(logProjectViewAction(projectId)),\n});\n\nconst mapStateToProps = (state) => ({\n  project: state.project,\n});\n\nexport default withRouter(\n  connect(mapStateToProps, mapDispatchToProps)(PreviewPage),\n);\n"],"sourceRoot":""}